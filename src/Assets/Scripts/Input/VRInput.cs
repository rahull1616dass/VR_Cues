//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/VRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInput"",
    ""maps"": [
        {
            ""name"": ""RightHand"",
            ""id"": ""dd93f917-9125-435a-ac62-c588e805d8c3"",
            ""actions"": [
                {
                    ""name"": ""UI Select"",
                    ""type"": ""Button"",
                    ""id"": ""c7732758-0dc2-4cc3-af38-2796b9fac355"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""AxisDeadzone(min=0.6)"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAround"",
                    ""type"": ""Value"",
                    ""id"": ""5b8ce4f7-38e7-456c-9e52-04c664a3d367"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.6)"",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ecf53c7-7ed0-40b7-9859-b5aa84ff7ce4"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a42c4e5-ea69-468a-9e44-2dc01851f859"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""89e7a457-3ccb-4043-abb0-41c9227b39f9"",
            ""actions"": [
                {
                    ""name"": ""UISelect"",
                    ""type"": ""Button"",
                    ""id"": ""5cb3c174-b4be-4ea8-a051-478f78ab556c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""AxisDeadzone(min=0.6)"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAround"",
                    ""type"": ""PassThrough"",
                    ""id"": ""92936ab4-6233-4dcd-83f9-cac7c11f707d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d572887-4cc0-4a8d-9c8f-863f3a6591a4"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UISelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea7207e5-1694-43b0-8596-8910dafde4ea"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_UISelect = m_RightHand.FindAction("UI Select", throwIfNotFound: true);
        m_RightHand_RotateAround = m_RightHand.FindAction("RotateAround", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_UISelect = m_LeftHand.FindAction("UISelect", throwIfNotFound: true);
        m_LeftHand_MoveAround = m_LeftHand.FindAction("MoveAround", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_UISelect;
    private readonly InputAction m_RightHand_RotateAround;
    public struct RightHandActions
    {
        private @VRInput m_Wrapper;
        public RightHandActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UISelect => m_Wrapper.m_RightHand_UISelect;
        public InputAction @RotateAround => m_Wrapper.m_RightHand_RotateAround;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @UISelect.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnUISelect;
                @UISelect.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnUISelect;
                @UISelect.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnUISelect;
                @RotateAround.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotateAround;
                @RotateAround.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotateAround;
                @RotateAround.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotateAround;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UISelect.started += instance.OnUISelect;
                @UISelect.performed += instance.OnUISelect;
                @UISelect.canceled += instance.OnUISelect;
                @RotateAround.started += instance.OnRotateAround;
                @RotateAround.performed += instance.OnRotateAround;
                @RotateAround.canceled += instance.OnRotateAround;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_UISelect;
    private readonly InputAction m_LeftHand_MoveAround;
    public struct LeftHandActions
    {
        private @VRInput m_Wrapper;
        public LeftHandActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UISelect => m_Wrapper.m_LeftHand_UISelect;
        public InputAction @MoveAround => m_Wrapper.m_LeftHand_MoveAround;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @UISelect.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnUISelect;
                @UISelect.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnUISelect;
                @UISelect.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnUISelect;
                @MoveAround.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMoveAround;
                @MoveAround.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMoveAround;
                @MoveAround.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMoveAround;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UISelect.started += instance.OnUISelect;
                @UISelect.performed += instance.OnUISelect;
                @UISelect.canceled += instance.OnUISelect;
                @MoveAround.started += instance.OnMoveAround;
                @MoveAround.performed += instance.OnMoveAround;
                @MoveAround.canceled += instance.OnMoveAround;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);
    public interface IRightHandActions
    {
        void OnUISelect(InputAction.CallbackContext context);
        void OnRotateAround(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnUISelect(InputAction.CallbackContext context);
        void OnMoveAround(InputAction.CallbackContext context);
    }
}
